AWSTemplateFormatVersion: '2010-09-09'
Description: Event-driven backend for order processing using SNS, SQS, Lambda, and DynamoDB.

Parameters:
  LambdaExecutionRoleArn:
    Type: String
    Description: ARN of the IAM role for Lambda execution (e.g. arn:aws:iam::<ACCOUNT_ID>:role/<LambdaRole>)

Resources:

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  OrderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderDLQ

  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OrderDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 30  # 30 seconds to process the message before it's retried

  OrderTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderTopic

  OrderQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref OrderTopic
      Endpoint: !GetAtt OrderQueue.Arn
      RawMessageDelivery: true

  OrderProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProcessOrder
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Role: !Ref LambdaExecutionRoleArn
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('Orders')

              for record in event['Records']:
                  sns_message = json.loads(record['body'])
                  order_data = json.loads(sns_message['Message'])

                  order_id = order_data['orderId']
                  user_id = order_data['userId']
                  item_name = order_data['itemName']
                  quantity = order_data['quantity']
                  status = order_data['status']
                  timestamp = order_data['timestamp']

                  print(f"Received order: {order_id}, {item_name}, {quantity}, {status}, {timestamp}")

                  try:
                      table.put_item(Item={
                          'orderId': order_id,
                          'userId': user_id,
                          'itemName': item_name,
                          'quantity': quantity,
                          'status': status,
                          'timestamp': timestamp
                      })
                      print(f"Order {order_id} saved to DynamoDB.")
                  except Exception as e:
                      print(f"Error saving order to DynamoDB: {e}")

              return {
                  'statusCode': 200,
                  'body': json.dumps('Message processed successfully')
              }
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt OrderQueue.Arn
